// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    PARTICIPANT
    TEAM_MEMBER
    ORGANIZER
    CO_ORGANIZER
    FACILITATOR
    ADMIN
}

// User authentication model
model User {
    id            String    @id @default(cuid())
    email         String    @unique
    name          String?
    password      String? // For email/password auth
    role          UserRole  @default(PARTICIPANT)
    emailVerified DateTime?
    image         String? // For OAuth providers like Google
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // NextAuth.js relations
    accounts Account[]
    sessions Session[]

    @@map("users")
}

// NextAuth.js Account model
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

// NextAuth.js Session model
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

// NextAuth.js Verification Token model
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}
