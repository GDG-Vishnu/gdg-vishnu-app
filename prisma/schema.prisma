// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    PARTICIPANT
    TEAM_MEMBER
    ORGANIZER
    CO_ORGANIZER
    FACILITATOR
    ADMIN
}

// Form field types enum for Form Builder
enum FieldType {
    INPUT
    TEXTAREA
    PASSWORD
    PHONE
    CHECKBOX
    RADIO
    SELECT
    COMBOBOX
    MULTISELECT
    SWITCH
    DATE
    DATETIME
    SMART_DATETIME
    FILE
    OTP
    LOCATION
    SIGNATURE
    SLIDER
    TAGS
}

// User authentication model
model User {
    id            String    @id @default(cuid())
    email         String    @unique
    name          String?
    password      String? // For email/password auth
    role          UserRole  @default(PARTICIPANT)
    emailVerified DateTime?
    image         String? // For OAuth providers like Google
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // NextAuth.js relations
    accounts Account[]
    sessions Session[]

    // Form Builder relations
    createdForms    Form[]           @relation("FormCreator")
    formSubmissions FormSubmission[] @relation("FormSubmitter")

    @@map("users")
}

// NextAuth.js Account model
model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

// NextAuth.js Session model
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

// NextAuth.js Verification Token model
model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

// Form Builder Models

// Form model - represents a complete form
model Form {
    id          String   @id @default(cuid())
    name        String
    description String?
    imageUrl    String? // Optional cover image
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    // Relations
    sections    Section[]
    submissions FormSubmission[]

    // Optional: Associate forms with users/creators
    createdBy String?
    creator   User?   @relation("FormCreator", fields: [createdBy], references: [id], onDelete: SetNull)

    @@map("forms")
}

// Section model - represents a section within a form
model Section {
    id     String  @id @default(cuid())
    title  String? // Optional section title
    order  Int // Position in form (0, 1, 2, etc.)
    formId String  @map("form_id")

    // Relations
    form   Form    @relation(fields: [formId], references: [id], onDelete: Cascade)
    fields Field[]

    @@map("sections")
}

// Field model - represents a form field within a section
model Field {
    id           String    @id @default(cuid())
    label        String
    placeholder  String?
    type         FieldType
    required     Boolean   @default(false)
    options      Json? // For select, radio, checkbox, multi-select options - stored as JSON array
    defaultValue String? // Default value for the field
    order        Int // Position in section (0, 1, 2, etc.)
    sectionId    String    @map("section_id")

    // Additional field configuration stored as JSON
    validation Json? // Validation rules (min, max, pattern, etc.)
    styling    Json? // Field-specific styling options
    logic      Json? // Conditional logic rules

    // Relations
    section   Section         @relation(fields: [sectionId], references: [id], onDelete: Cascade)
    responses FieldResponse[]

    @@map("fields")
}

// Form Submission models for storing responses

// Form submission - represents a completed form submission
model FormSubmission {
    id          String   @id @default(cuid())
    formId      String   @map("form_id")
    submittedAt DateTime @default(now())

    // Optional: Associate submissions with users
    submittedBy String?
    submitter   User?   @relation("FormSubmitter", fields: [submittedBy], references: [id], onDelete: SetNull)

    // Relations
    form      Form            @relation(fields: [formId], references: [id], onDelete: Cascade)
    responses FieldResponse[]

    @@map("form_submissions")
}

// Field response - represents a response to a specific field
model FieldResponse {
    id           String @id @default(cuid())
    fieldId      String @map("field_id")
    submissionId String @map("submission_id")
    value        Json // Flexible value storage (string, number, array, object)

    // Relations
    field      Field          @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    submission FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

    @@unique([fieldId, submissionId]) // Ensure one response per field per submission
    @@map("field_responses")
}
